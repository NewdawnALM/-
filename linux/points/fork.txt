对于fork经常看到很经典的一道题：

void main()
{
	int i;
	for(i = 0; i < 3; i++)
	{
		fork();
		printf("*\n");
	}
	return;
}

会输出几个*呢？
先直接给出公式答案：循环n次，会输出 2 ^ (n + 1) - 2 个*。
为什么呢？其实就是一棵二叉树，每次fork就是一个分叉，画个图就能差不多理解了，
除去根节点外，其余的节点总数为 2 + 4 + 8 + ...... + 2 ^ n = 2 ^ (n + 1) - 2
虽说输出 2 ^ (n + 1) - 2 个*，但要注意，从main开始一共只产生 2 ^ n 个进程数
而已，也就是说二叉树的图中只有最底层的那些节点数是第n轮fork后的所有进程（假
设不考虑进程的死亡）
具体有个写得很好的blog可以参考下：http://blog.csdn.net/myarrow/article/details/8995091

